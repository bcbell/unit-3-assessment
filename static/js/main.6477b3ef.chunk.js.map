{"version":3,"sources":["components/CircleSelector/CircleSelector.jsx","components/Circles/Circles.jsx","App.js","reportWebVitals.js","index.js"],"names":["CircleSelector","props","className","circleNo","map","circle","idx","selectedCircleIdx","onClick","handleCircleSelection","Circles","alt","App","state","slectedCircleIdx","newIdx","setState","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAmBeA,G,YAhBO,SAACC,GACnB,OACI,mCACA,qBAAKC,UAAU,iBAAf,SACKD,EAAME,SAASC,KAAI,SAACC,EAAQC,GAAT,OACpB,wBAAqBJ,UAAWD,EAAMM,oBAAqBD,EAAM,WAAY,QAC7EE,QAAS,kBAAIP,EAAMQ,sBAAsBH,IADzC,SAGKL,EAAMM,oBAAoBD,EAA1B,iBAA0CA,EAAK,EAA/C,qCAA+EA,EAAK,IAH5ED,YCKVK,G,MAVA,SAACT,GACZ,OACI,qBAAKC,UAAU,UAAf,SACKD,EAAME,SAASC,KAAI,SAACC,EAAQC,GAAT,OACrB,qBAAKJ,UAAWD,EAAMM,oBAAsBD,EAAM,WAAa,QAASE,QAAS,kBAAIP,EAAMQ,sBAAsBH,IAAmBK,IAAI,GAAxI,SAA4IL,GAAhBD,UCFjIF,EAAS,CAAC,IAAK,IAAK,IAAI,KAuBfS,E,4MApBbC,MAAM,CACJC,iBAAkB,G,EAGpBL,sBAAsB,SAACM,GACrB,EAAKC,SAAS,CAACT,kBAAmBQ,K,uDAGlC,OACE,sBAAKb,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,qCACA,iCACE,cAAC,EAAD,CAAgBO,sBAAuBQ,KAAKR,sBAAuBN,SAAUA,EAAUI,kBAAmBU,KAAKJ,MAAMN,oBACrH,cAAC,EAAD,CAASE,sBAAuBQ,KAAKR,sBAAuBN,SAAUA,EAAUI,kBAAmBU,KAAKJ,MAAMN,8B,GAdtGW,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6477b3ef.chunk.js","sourcesContent":["import React from 'react'\nimport './CircleSelector.css'\n\nconst CircleSelector =(props)=>{\n    return(\n        <>\n        <div className='CircleSelector'>\n            {props.circleNo.map((circle, idx)=>\n            <button key={circle} className={props.selectedCircleIdx ===idx ? 'selected': 'color'}\n            onClick={()=>props.handleCircleSelection(idx)}\n            >\n                {props.selectedCircleIdx===idx ? `Circle ${idx +1} Selected` : `Select Circle ${idx +1}`}\n            </button>\n            )}\n           \n        </div>\n        </>\n    )\n}\nexport default CircleSelector;","import React from 'react'\nimport './Circles.css'\n\nconst Circles =(props)=>{\n    return(\n        <div className='Circles'>\n            {props.circleNo.map((circle, idx)=>\n           <div className={props.selectedCircleIdx === idx ? 'selected' : 'color'} onClick={()=>props.handleCircleSelection(idx)} key={circle} alt=''>{idx}</div>\n            )}\n        </div>\n    )\n}\n\nexport default Circles","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './components/CircleSelector/CircleSelector'\nimport Circles from './components/Circles/Circles'\n\nconst circleNo=['0', '1', '2','3']\n\nclass App extends Component {\n  state={\n    slectedCircleIdx :0\n  }\n\n  handleCircleSelection=(newIdx)=>{\n    this.setState({selectedCircleIdx: newIdx})\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 3 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector handleCircleSelection={this.handleCircleSelection} circleNo={circleNo} selectedCircleIdx={this.state.selectedCircleIdx}/>\n          <Circles handleCircleSelection={this.handleCircleSelection} circleNo={circleNo} selectedCircleIdx={this.state.selectedCircleIdx}/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}